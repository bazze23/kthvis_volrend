#version 430

layout (binding = 1) uniform sampler3D TexVolume; 
layout (binding = 2) uniform sampler3D TexVolumeGradient;

uniform vec3 VolumeGridResolution;
uniform vec3 VolumeVoxelSize;
uniform vec3 VolumeGridSize;

uniform vec3 CameraEye;

uniform mat4 u_CameraLookAt;
uniform mat4 ProjectionMatrix;

uniform float u_TanCameraFovY;
uniform float u_CameraAspectRatio;

uniform float Isovalue;
uniform float StepSizeSmall;
uniform float StepSizeLarge;
uniform float StepSizeRange;
uniform vec4 Color;

uniform int ApplyGradientPhongShading;

uniform vec3 VolumeScales;

uniform float BlinnPhongKa;
uniform float BlinnPhongKd;
uniform float BlinnPhongKs;
uniform float BlinnPhongShininess;

uniform vec3 BlinnPhongIspecular;

uniform vec3 WorldEyePos;
uniform vec3 LightSourcePosition;

struct GPUOctreeNode {
    vec3 minBounds;        // 12 bytes
    float padding1;        // 4 bytes for alignment
    vec3 maxBounds;        // 12 bytes
    float padding2;        // 4 bytes for alignment
    float minVal;          // 4 bytes
    float maxVal;          // 4 bytes
    int childIndices[8];   // 32 bytes
    int isLeaf;            // 4 bytes
};

layout(std430, binding = 16) buffer OctreeNodesBuffer {
    GPUOctreeNode octreeNodes[];
};
layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
layout (rgba16f, binding = 0) uniform image2D OutputFrag;

//////////////////////////////////////////////////////////////////////////////////////////////////
// From structured/_common_shaders/ray_bbox_intersection.comp
struct Ray { vec3 Origin; vec3 Dir; };
bool RayAABBIntersection (vec3 vert_eye, vec3 vert_dir, vec3 vol_scaled_dim,
                          out Ray r, out float rtnear, out float rtfar);
//////////////////////////////////////////////////////////////////////////////////////////////////

vec3 ShadeBlinnPhong (vec3 Tpos, vec3 clr)
{
  // Gradient normal
  vec3 gradient_normal =  texture(TexVolumeGradient, Tpos / VolumeGridSize).xyz;
  
  // If is non-zero
  if (gradient_normal != vec3(0, 0, 0))
  {
    vec3 Wpos = Tpos - (VolumeGridSize * 0.5);
    
    vec3 light_direction = normalize(LightSourcePosition - Wpos);
    vec3 eye_direction   = normalize(CameraEye - Wpos);
    vec3 halfway_vector  = normalize(eye_direction + light_direction);
  
    gradient_normal      = normalize(gradient_normal);
    // We consider front and back faces as the same
    // float FrontOrBack = dot(gradient_normal, eye_direction);
    // float FrontOrBack = dot(gradient_normal, light_direction);
    // if (FrontOrBack < 0)
    // {
    //   gradient_normal = -gradient_normal;
    // }
    
    // float dot_diff = dot(gradient_normal, light_direction);
    // if (dot_diff < 0) dot_diff = dot(-gradient_normal, light_direction);
    float dot_diff = max(0, dot(gradient_normal, light_direction));

    // float dot_spec = dot(halfway_vector, gradient_normal);
    // if (dot_spec < 0) dot_spec = dot(halfway_vector, -gradient_normal);
    float dot_spec = max(0, dot(halfway_vector, gradient_normal));
   
    clr = 
      // rgb only affects ambient + diffuse
      (clr * (BlinnPhongKa + BlinnPhongKd * dot_diff)) 
      // specular contribution has it's own color
      + BlinnPhongIspecular * BlinnPhongKs * pow(dot_spec, BlinnPhongShininess)
    ;
  }

  return clr;
}

void main() {
    vec3 intersectedNodes[32];

    // Get 2D pixel coordinates and image size
    ivec2 storePos = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(OutputFrag); // Dimensions of the viewport

    // Simple bounds check
    if (storePos.x < size.x && storePos.y < size.y) {


        // Process ray intersection with the octree
        int numIntersectedNodes = 0; // Counter for this pixel's intersected nodes

        // Get screen position [x, y] and consider centering the pixel by + 0.5
        vec2 fpos = vec2(storePos) + 0.5;

        // Transform fpos from [w, h] to [0, 1] to [-1, 1]
        vec3 VerPos = (vec3(fpos.x / float(size.x), fpos.y / float(size.y), 0.0) * 2.0) - 1.0;

        // Camera direction
        vec3 camera_dir = normalize(vec3(VerPos.x * u_TanCameraFovY * u_CameraAspectRatio, VerPos.y * u_TanCameraFovY, -1.0) * mat3(u_CameraLookAt));

        // Check for overall intersection with volume, eliminating a lot of unnecessary calculations
        Ray r; float tnear, tfar;
        bool inbox = RayAABBIntersection(CameraEye, camera_dir, VolumeGridSize, r, tnear, tfar);
        if (inbox) {

            // Initialize Transparency and Radiance color
            vec4 dst = vec4(0.0);

            // Traverse the octree and save relevant nodes
            for (int nodeIndex = 0; nodeIndex < octreeNodes.length(); ++nodeIndex) {

                // Get the current node
                GPUOctreeNode currentNode = octreeNodes[nodeIndex];

                // Skip this node if the isovalue is not in range
                if (!((currentNode.maxVal > Isovalue) && (currentNode.minVal < Isovalue))) continue;

                // Save node data if ray intersects it
                // TODO: we have to make sure we are in a leaf node before adding it, and traverse using stack!
                bool intersects = RayAABBIntersection(CameraEye, camera_dir, currentNode.maxBounds - currentNode.minBounds, r, tnear, tfar);
                if (intersects && numIntersectedNodes <= intersectedNodes.length()) {
                    intersectedNodes[numIntersectedNodes] = vec3(tnear, tfar, nodeIndex);
                    numIntersectedNodes++;
                }
            }

            for (int i = 0; i < numIntersectedNodes; i++) {
                vec3 intersectedNode = intersectedNodes[i];
                tnear = intersectedNode[0];
                tfar = intersectedNode[1];

                // Distance to be evaluated
                float D = abs(tfar - tnear);

                // World position at tnear, translated to the volume [0, VolumeGridSize]
                vec3 wld_pos = r.Origin + r.Dir * tnear;
                // Texture position
                vec3 tex_pos = wld_pos + (VolumeGridSize * 0.5);

                // Evaluate from 0 to D...
                float prevDensity = texture(TexVolume, tex_pos / VolumeGridSize).r;
                for (float s = 0.0; s < D;) {
                    float CurrentStepSize = (abs(prevDensity - Isovalue) < StepSizeRange) ? StepSizeSmall : StepSizeLarge;

                    // Get the current step or the remaining interval
                    float h = min(CurrentStepSize, D - s);
                
                    // Texture position at tnear + (s + h)
                    vec3 s_tex_pos = tex_pos  + r.Dir * (s + h);
                
                    // Get normalized density from volume
                    float density = texture(TexVolume, s_tex_pos / VolumeGridSize).r;

                    // First hit: isosurface
                    if ( (prevDensity <= Isovalue && Isovalue < density)
                    || (prevDensity >= Isovalue && Isovalue > density) )
                    {
                    //refine position
                    float t = (Isovalue - prevDensity) / (density - prevDensity);
                    s_tex_pos = tex_pos  + r.Dir * (s + t * h);
                    
                    // Get color
                    vec4 src = Color;

                    // Apply gradient, if enabled
                    if (ApplyGradientPhongShading == 1)
                    {
                        src.rgb = ShadeBlinnPhong(s_tex_pos, src.rgb);
                    }

                    // Front-to-back composition
                    src.rgb = src.rgb * src.a;
                    dst = dst + (1.0 - dst.a) * src;
                    
                    // Opacity threshold: 99%
                    if (dst.a > 0.99) break;
                    }

                    // Go to the next interval
                    prevDensity = density;
                    s = s + h;
                }
            }
            imageStore(OutputFrag, storePos, dst);
        }
    }
}

// // Main fuction to debug octree
// void main() {
//     ivec2 storePos = ivec2(gl_GlobalInvocationID.xy);
//     ivec2 imageSize = imageSize(OutputFrag);

//     // Simple bounds check
//     if (storePos.x < imageSize.x && storePos.y < imageSize.y) {
//         // Get the node index (e.g., based on the pixel's x position)
//         int nodeIndex = storePos.x; // Simple linear indexing for now
//         if (nodeIndex < octreeNodes.length()) {
//             GPUOctreeNode node = octreeNodes[nodeIndex];

//             // Store the node's min/max values as a color (just for testing)
//             // Using the minVal and maxVal to generate a color
//             vec4 color = vec4(node.minVal, node.maxVal, 0.0, 1.0);

//             // Output to the image
//             imageStore(OutputFrag, storePos, color);
//         }
//     }
// }